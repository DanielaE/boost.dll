[/
    Copyright 2014 Renato Tegon Forti, Antony Polukhin
    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
/]

[section:introduction Getting started]

To start with the library you only need to include `<boost/dll.hpp>` header. After that you are free to import and export functions and variables:


[import ../example/getting_started.cpp]
[import ../example/getting_started_library.cpp]

```
using namespace boost;
```

[table:starting
[[ In DLL/DSL sources: ]                    [ In code that uses DLL/DSL: ]              [ Function description: ]]
[[ [getting_started_exports_c_function] ]   [ [getting_started_imports_c_function] ]    [ [funcref boost::dll::import_function import_function ] ]]
[[ [getting_started_exports_c_variable] ]   [ [getting_started_imports_c_variable] ]    [ [funcref boost::dll::import_variable import_variable ] ]]
[[ [getting_started_exports_cpp_function] ] [ [getting_started_imports_cpp_function] ]  [ [macroref
BOOST_DLL_ALIAS] [funcref boost::dll::import_function_alias import_function_alias] ]]
[[ [getting_started_exports_cpp_variable] ] [ [getting_started_imports_cpp_variable] ]  [ [macroref
BOOST_DLL_ALIAS] [funcref boost::dll::import_variable_alias import_variable_alias] ]]
]

In all the cases above it is safe to use imported variable or function because the
`boost::function` or `boost::shared_ptr` internaly hold a reference to shread library.

[macroref BOOST_SYMBOL_EXPORT] is just a macro from Boost.Config that expands into the `__declspec(dllexport)` or `__attribute__((visibility("default")))`. You are free to use your own macro for exports.

[note On Linux/POSIX link with library "dl". "-fvisibility=hidden" flag is also recomended for use on Linux/POSIX.]

If you need a low level api [classref boost::dll::shared_library] will suit you. If you want to load a library,
just construct that class with a path to the library as a parameter:
```
boost::dll::shared_library lib("/test/boost/application/libtest_library.so");

```
Now you can easily import symbols from that library using the `get` member function:
```
int plugin_constant = lib.get<const int>("integer_variable");
boost::function<int()> f = lib.get<int()>("function_returning_int");
```
In case of `boost::dll::shared_library` it is safe to use imported symbols only until `boost::dll::shared_library`
instance is not destroyed.

[endsect]
