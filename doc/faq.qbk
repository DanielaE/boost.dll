[/
    Copyright 2014 Renato Tegon Forti, Antony Polukhin
    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
/]

[section F.A.Q.]

[section Is Boost.Plugin thread-safe?]
It is safe in the manner as all the C++ Standart Library containers are: it is safe to use
different instances of shared_library from different threads even if all the instances loaded the
same library.
[endsect]

[section Why on Linux symbols from one plugin are seen in another? Can't get symbol with same name from right plugin! ]
You've run into the symbol shadowing plroblem. Compile your plugins with "-fvisibility=hidden" flag and take a look
to the Tutorial section.
[endsect]

[section How Unicode (Windows) is hadled?]
Boost.Plugin supports Unicode, so that you could provide a unicode paths to it.
[endsect]

[section Can I open an executable file?]
Yes, you can. Symbols need be exported using in the executable using BOOST_SYMBOL_EXPORT or BOOST_PLUGIN_ALIAS.
You can use 'shared_library::load_self()' method to load yourself. Refer to the Tutorial section for more info.
[endsect]

[section What if I specify wrong type in `shared_library::get<T>` or `shared_function<T>`?]
Usualy you'll end up with `Segmentation Fault`. However it is safe to make types more strict, for example
making `const int` from an `int` will not harm.
[endsect]

[section I have found a bug, how do I notify?]
Create an [@https://github.com/apolukhin/Boost.Plugin/issues issue at github] with a detailed description.
[endsect]

[endsect]


